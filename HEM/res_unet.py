# -*- coding: utf-8 -*-
"""Res_UNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5GCugnKwoxgbGaqUgWTrUwuJ5YEjjmw
"""

import torch.nn as nn
import math
import torch.utils.model_zoo as model_zoo
import torch
import numpy as np
import os

model_urls = {
    'resnet18': 'https://download.pytorch.org/models/resnet18-5c106cde.pth',
    'resnet34': 'https://download.pytorch.org/models/resnet34-333f7ec4.pth',
    'resnet50': 'https://download.pytorch.org/models/resnet50-19c8e357.pth',
    'resnet101': 'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth',
    'resnet152': 'https://download.pytorch.org/models/resnet152-b121ed2d.pth',
    'resnext50_32x4d': 'https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth',
    'resnext101_32x8d': 'https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth',
    'wide_resnet50_2': 'https://download.pytorch.org/models/wide_resnet50_2-95faca4d.pth',
    'wide_resnet101_2': 'https://download.pytorch.org/models/wide_resnet101_2-32ee1156.pth',
}

def double_conv(in_channels, out_channels):
    return nn.Sequential(
        nn.Conv2d(in_channels, out_channels, 3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(out_channels, out_channels, 3, padding=1),
        nn.ReLU(inplace=True)
    )

def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=1, bias=False)
def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution without padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride,
                     padding=0, bias=False)

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, layer_normalization='batch'):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.layer_norm =  layer_normalization
        self.bn1 = norm2d(layer_normalization)(planes)
        self.bn2 = norm2d(layer_normalization)(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out

class Bottleneck(nn.Module):
    expansion = 4
    def __init__(self, inplanes, planes, stride=1, downsample=None, layer_normalization='batch'):
        super(Bottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)
        self.bn1 = norm2d(layer_normalization)(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,
                               padding=1, bias=False)
        self.bn2 = norm2d(layer_normalization)(planes)
        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)
        self.bn3 = norm2d(layer_normalization)(planes * 4)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out

def norm2d(type):
    if type == 'batch':
        return nn.BatchNorm2d  # nn.SyncBatchNorm  # 
    elif type == 'instance':
        return nn.InstanceNorm2d
    else:
        raise ValueError("Invalid normalization type: ", type)

class ResUNet(nn.Module):

    def __init__(self, block, layers, n_class=1000, input_size=256, input_channels=3, layer_normalization='batch'):
        super(ResUNet, self).__init__()
        self.input_size = input_size
        self.inplanes = 64        
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.layer_norm = layer_normalization

        # always use name bnX so model weights can be found when loading pretrained models
        self.bn1 = norm2d(layer_normalization)(64)
        self.relu = nn.ReLU(inplace=True)
        self.x0 = None
        self.x1 = None
        self.x2 = None
        self.x3 = None
        self.x4 = None

        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()       

        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.upsamplex2 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)  
        self.upsamplex4 = nn.Upsample(scale_factor=4, mode='bilinear', align_corners=False)       
        
        self.dconv_up3 = double_conv(256 + 512, 256)
        self.dconv_up2 = double_conv(128 + 256, 128)
        self.dconv_up1 = double_conv(128 + 64, 64)
        
        self.conv_last = nn.Conv2d(64, n_class, 1)
        
        
    def _make_layer(self, block, planes, blocks, stride=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                    nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=1, stride=stride, bias=False),
                norm2d(self.layer_norm)(planes * block.expansion)
            )
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, layer_normalization=self.layer_norm))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes, layer_normalization=self.layer_norm))
        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        self.x0 = self.relu(x)                        # (64, 2s, 2s)
        self.x1 = self.maxpool(self.x0)               # (64, 4s, 4s)   

        self.x2 = self.layer1(self.x1)                # (64, 4s, 4s)
        self.x3 = self.layer2(self.x2)                # (128, 8s, 8s)
        self.x4 = self.layer3(self.x3)                # (256, 16s, 16s)
        self.x5 = self.layer4(self.x4)                # (512, 32s, 32s)

        #decoder        
        self.x6 = self.upsamplex2(self.x5)              #(512, 16s, 16s)
        self.x7 = torch.cat([self.x6, self.x4], dim=1)  #(512+256, 16s, 16s)
        self.x8 = self.dconv_up3(self.x7)               #(256, 16s, 16s)
        
        self.x9 = self.upsamplex2(self.x8)              #(256, 8s, 8s)
        self.x10 = torch.cat([self.x9, self.x3], dim=1) #(256+128, 8s, 8s)     
        self.x11 = self.dconv_up2(self.x10)             #(128, 8s, 8s)
        
        self.x12 = self.upsamplex2(self.x11)            #(128, 4s, 4s)
        self.x13 = torch.cat([self.x12, self.x2], dim=1)#(128+64, 4s, 4s)
        self.x14 = self.dconv_up1(self.x13)             #(64, 4s, 4s)
        
        out = self.conv_last(self.x14)
        out = self.upsamplex4(out)
        
        return out

def resnet18_UNet(pretrained=False, **kwargs):
    model = ResUNet(BasicBlock, [2, 2, 2, 2], **kwargs)
    if pretrained:
        try:
            if not os.path.isfile('./resnet18-5c106cde.pth'):
                os.system('wget {}'.format(model_urls['resnet18']))
            model.load_state_dict(torch.load('./resnet18-5c106cde.pth'), strict=False)
        except RuntimeError or KeyError as e:
            print(e)
    return model


class UNet(nn.Module):
    def __init__(self, n_class):
        super().__init__()
        self.dconv_down1 = double_conv(3, 64)
        self.dconv_down2 = double_conv(64, 128)
        self.dconv_down3 = double_conv(128, 256)
        self.dconv_down4 = double_conv(256, 512)        

        self.maxpool = nn.MaxPool2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)        
        
        self.dconv_up3 = double_conv(256 + 512, 256)
        self.dconv_up2 = double_conv(128 + 256, 128)
        self.dconv_up1 = double_conv(128 + 64, 64)
        
        self.conv_last = nn.Conv2d(64, n_class, 1)
        
        
    def forward(self, x):
        conv1 = self.dconv_down1(x)
        x = self.maxpool(conv1)
        conv2 = self.dconv_down2(x)
        x = self.maxpool(conv2)
        conv3 = self.dconv_down3(x)
        x = self.maxpool(conv3)   
        x = self.dconv_down4(x)
        
        x = self.upsample(x)        
        x = torch.cat([x, conv3], dim=1)
        x = self.dconv_up3(x)
        x = self.upsample(x)        
        x = torch.cat([x, conv2], dim=1)       
        x = self.dconv_up2(x)
        x = self.upsample(x)        
        x = torch.cat([x, conv1], dim=1)   
        x = self.dconv_up1(x)
        
        out = self.conv_last(x)
        return out
